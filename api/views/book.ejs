<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Your Book</title>
    <style>
		body{
			background-color: lightblue;
		}
		article{
			width: 100%;
			height: 100%;
			position: absolute;
			left: 0%;
			margin-top: auto;
			margin-bottom: auto;
			text-overflow:hidden;
		}
		.chapter{
			width: 13%;
			position: fixed;
			top: 10%;
			left:2%;
		}
		.chapter a:hover {
			background-color:red;
		}
		.text2{
			width: 70%;
			position: relative;
			top: 10%;
			left:15%;
			border:1px black solid;
		}
		.footnote{
			width: 60%;
			position: relative;
			top: 10%;
			left:20%;
		}
		.left{
			display:block;
			text-align: left;
			margin-top: auto;
			margin-bottom: auto;
			width: 100%;
		}
		.center{
			display: block;
			text-align: center;
			margin-top: auto;
			margin-bottom: auto;
			width: 100%;
		}
		.right{
			display: block;
			text-align: right;
			margin-top: auto;
			margin-bottom: auto;
			width: 100%;
		}
		.fixOptions {
			margin-left: 50%;
			position: fixed;
			top: 0px;
			right:0px;
			border: 1px #000;
			background-color: rgb(128, 0, 0);
			z-index: 100;
		}
		.borderTableOfContent {
			position: fixed;
			top:10%;
			left:87%;
			overflow:hidden;
		}
		.fontTextContent {
			font-family: Arial;
		}
		.BackPage{
			position:fixed;
		}
		.borderTableOfContent a:hover
		{
			background-color:red;
			cursor: pointer;
		}
		.borderTableOfContent a
		{
			color:blue;
			cursor: pointer;
		}
		div.chapter:before{
			content: "Table of Content";
			font-weight: bold;
		}

	</style>

    <script>
        function selectFont(selectTag) {
            var listValue = selectTag.options[selectTag.selectedIndex].text;
            var text2Elem = document.getElementById("text2");
            var allElemsInText2 = text2Elem.getElementsByTagName('*');
            console.log(allElemsInText2);

            for (var i = 0; i < allElemsInText2.length; i++)
            {
                //allElemsInText2[i].setAttribute('style', 'font-family:' + listValue);
                allElemsInText2[i].style.fontFamily = listValue;
            }
            var pathArray = window.location.pathname.split('/');
            var keyBookIDScroll = pathArray[3] + "_font";
            document.getElementById("text2").style.fontFamily = listValue;
            var indexOfElemToScrollInto = localStorage.setItem(keyBookIDScroll,listValue);
        }
    </script>
    <script>
        function selectSize(selectTag) {
            var listValue = selectTag.options[selectTag.selectedIndex].text;
            document.getElementById("text2").style.fontSize = listValue;
            var pathArray = window.location.pathname.split('/');
            var keyBookIDScroll = pathArray[3] + "_size";
            var indexOfElemToScrollInto = localStorage.setItem(keyBookIDScroll,listValue);
        }
    </script>
    <script>
        function zoom(id) {
            var textContent = document.getElementById("text2");

            let rootFontSize = parseFloat(
                window.getComputedStyle(textContent, null).getPropertyValue("font-size")
            );
            //console.log("Root font size " + rootFontSize);
            if (id === "zoomIn") {
                rootFontSize = rootFontSize + 2;
            }
            if (id === "zoomOut" && rootFontSize > 10) {
                rootFontSize = rootFontSize - 2;
            }
            textContent.style.fontSize = `${rootFontSize}px`;
            var pathArray = window.location.pathname.split('/');
            var keyBookIDScroll = pathArray[3] + "_size";
            var indexOfElemToScrollInto = localStorage.setItem(keyBookIDScroll,rootFontSize + "px");
            //console.log("Root font size after " + rootFontSize);
        }
    </script>
    <script>
        /*var cnt = 0;
        function addBookmark() {
            cnt++;
            var sel = window.getSelection();
            var selectedText = sel.toString();
            console.log(selectedText);
            var range = sel.getRangeAt(0).cloneRange();
            var markerTextChar = range.extractContents();

            console.log(markerTextChar);

            var markerEl, markerId = "bookmark-" + cnt;
            markerEl = document.createElement("span");
            markerEl.id = markerId;
            if (selectedText != "")
            {
                markerEl.appendChild(markerTextChar);

                range.insertNode(markerEl);

                var tableOfContentElem = document.getElementById("tableOfContent");
                tableOfContentElem.innerHTML += "<a href='#bookmark-" + cnt + "'>" + selectedText + "</a><br>";
                //var chapterElem = document.getElementById("chapter");
                //chapterElem.innerHTML += "<a href='#bookmark-" + cnt + "'>" + selectedText + "</a><br>";
            }
        }*/

		//This function returns an HTMLCollection (an array) of all paragraph elements in the document
        function getAllPElems()
		{
			let container, elem;
			container = document.getElementById("text2");
			elem = container.children;
			console.log(elem);

			return elem;
		}

		window.addEventListener('DOMContentLoaded', (event) => {
            console.log('DOM fully loaded and parsed');
			var pathArray = window.location.pathname.split('/');
			var keyBookIDBookmark = pathArray[3] + "_bookmark";
			if (localStorage.getItem(keyBookIDBookmark) == null)
			{
				var bookmarkArray = [];
				localStorage.setItem(keyBookIDBookmark, bookmarkArray);
			}
        });

        function addBookmark()
        {
        	var pathArray = window.location.pathname.split('/');
            var keyBookIDBookmark = pathArray[3] + "_bookmark";
            var bookmarkStr = localStorage.getItem(keyBookIDBookmark);
            var bookmarkArray = bookmarkStr.split(',');
            var cnt = bookmarkArray.length;

			var pElems = getAllPElems();
			var currentTopMostElem;
			for (var i = 0; i < pElems.length; i++)
			{
				if (pElems[i].getBoundingClientRect().top > 0)
				{
					currentTopMostElem = i;
					break;
				}
			}

			bookmarkArray.push(currentTopMostElem);
			localStorage.setItem(keyBookIDBookmark, bookmarkArray);
			console.log(bookmarkArray);

			var tableOfContentElem = document.getElementById("tableOfContent");
			tableOfContentElem.innerHTML += "<a onclick='GoToBookmark(" + cnt + ")'>Bookmark " + cnt + "</a><br>";

			var keyBookIDBookmarkDisplay = pathArray[3] + "_displayBookmark";
			var valueBookIDBookmarkDisplay = document.getElementById("tableOfContent").innerHTML;
			localStorage.setItem(keyBookIDBookmarkDisplay, valueBookIDBookmarkDisplay);
        }

        function GoToBookmark(cnt)
        {
        	var pathArray = window.location.pathname.split('/');
			var keyBookIDBookmark = pathArray[3] + "_bookmark";
			var allBookIDBookmarks = localStorage.getItem(keyBookIDBookmark);
			var allBookIDBookmarksArray = allBookIDBookmarks.split(',');
			var indexOfElemToScrollInto = allBookIDBookmarksArray[cnt];
			var pElems = getAllPElems();
			if (indexOfElemToScrollInto != null)
			{
				pElems[indexOfElemToScrollInto].scrollIntoView();
			}
        }
    </script>
    <script>
		function addParagraph(){
			let container = document.getElementById("text2").innerHTML;

			var pars = container.split(/\r?<br>|\r/);

			var res = ""
			for(let i =0;i< pars.length;i++){
				res = res + "<p>" + pars[i] + "</p>";
			}
			document.getElementById("text2").innerHTML = res;

		}
		document.addEventListener("DOMContentLoaded", addParagraph);
	</script>

	<script>
		//let container, elem;
		//var currentTopMostElem;

		function getAllPElems()
		{
			let container, elem;
			container = document.getElementById("text2");
			elem = container.children;
			console.log(elem);

			return elem;
		}

		document.addEventListener("scroll",function()
		{
			/*for (var i = 0; i < elem.length; i++)
			{
				if (elem[i].getBoundingClientRect().top > 0)
				{
					currentTopMostElem = i;
					break;
				}
			}
			var pathArrayScroll = window.location.pathname.split('/');
			var bookIDScroll = pathArrayScroll[3];
			var keyBookIDScroll = bookIDScroll + "_scroll";
			localStorage.setItem(keyBookIDScroll, currentTopMostElem);*/

			var pElems = getAllPElems();
			var currentTopMostElem;
			for (var i = 0; i < pElems.length; i++)
			{
				if (pElems[i].getBoundingClientRect().top > 0)
				{
					currentTopMostElem = i;
					break;
				}
			}
			var pathArrayScroll = window.location.pathname.split('/');
			var bookIDScroll = pathArrayScroll[3];
			var keyBookIDScroll = bookIDScroll + "_scroll";
			localStorage.setItem(keyBookIDScroll, currentTopMostElem);
		});

		function ScrollToLastView()
		{
			var pathArray = window.location.pathname.split('/');
			var keyBookIDScroll = pathArray[3] + "_scroll";
			var indexOfElemToScrollInto = localStorage.getItem(keyBookIDScroll);
			var pElems = getAllPElems();
			if (indexOfElemToScrollInto != null)
			{
				pElems[indexOfElemToScrollInto].scrollIntoView();
			}
		}

		function getFont()
		{
			var pathArray = window.location.pathname.split('/');
			var keyBookIDFont = pathArray[3] + "_font";
			var setFontOnRefresh = localStorage.getItem(keyBookIDFont);
			if (setFontOnRefresh != null)
			{
				document.getElementById("text2").style.fontFamily = setFontOnRefresh;
			}
		}

		function getSize()
		{
			var pathArray = window.location.pathname.split('/');
			var keyBookIDSize = pathArray[3] + "_size";
			var setSizeOnRefresh = localStorage.getItem(keyBookIDSize);
			if (setSizeOnRefresh != null)
			{
				document.getElementById("text2").style.fontSize = setSizeOnRefresh;
			}
		}

		function getBookmark()
		{
			var pathArray = window.location.pathname.split('/');
			var keyBookIDBookmarkDisplay = pathArray[3] + "_displayBookmark";
			var valueBookIDBookmarkDisplay = localStorage.getItem(keyBookIDBookmarkDisplay);
			if (valueBookIDBookmarkDisplay != null)
			{
				document.getElementById("tableOfContent").innerHTML = valueBookIDBookmarkDisplay;
			}
		}

		window.onload = function ()
		{
			/*var pathArray = window.location.pathname.split('/');
			var bookID = pathArray[3];
			var setStateOnRefresh = localStorage.getItem(bookID);
			if (setStateOnRefresh != null)
			{
				//document.body.innerHTML = setStateOnRefresh;
			}*/
			//getPosition();
			//getAllPElems();
			getFont();
			getSize();
			getBookmark();
			ScrollToLastView();
		};

		// this function resets the localstorage and thus resets the page back to it's original state.
		function reset()
		{
			localStorage.clear();
			window.location = window.location;
		}
	</script>

<script>
	function highlightRange(range) {
		//avoid empty range
		if (range.toString() != "" && range.toString().match(/\w+/g) != null) {
		
			var newNode = document.createElement("span");
			newNode.setAttribute("style", "background-color: yellow; display: inline;");
			range.surroundContents(newNode);
		}
	}

	function getSafeRanges(dangerous) {
		//Node that contains both boundary points of the Range
		var a = dangerous.commonAncestorContainer;
		// Starts -- Work inward from the start, selecting the largest safe range
		var s = new Array(0),
		rs = new Array(0);
		if (dangerous.startContainer != a) {
			for (var i = dangerous.startContainer; i != a; i = i.parentNode) {
				//console.log(i);
				s.push(i);
			}	
		}
		//console.log(s);
		if (0 < s.length) {
			for (var i = 0; i < s.length; i++) {
				var xs = document.createRange();
				if (i) {
					//set the start boundary of Range after s[i-1]
					xs.setStartAfter(s[i - 1]);
					//set the end boundary of Range after s[i].lastchild
					xs.setEndAfter(s[i].lastChild);
				} 
				else {
					//set the Start of range
					xs.setStart(s[i], dangerous.startOffset);
					xs.setEndAfter(s[i].nodeType == Node.TEXT_NODE ? s[i] : s[i].lastChild);
				}
				rs.push(xs);
			}
		}
		//console.log(rs);
		// Ends -- basically the same code reversed
		var e = new Array(0), re = new Array(0);
		if (dangerous.endContainer != a) {
			for (var i = dangerous.endContainer; i != a; i = i.parentNode) {
				e.push(i);
			}
		}
		//console.log(e);
		if (0 < e.length) {
			for (var i = 0; i < e.length; i++) {
				var xe = document.createRange();
				if (i) {
					xe.setStartBefore(e[i].firstChild);
					xe.setEndBefore(e[i - 1]);
				} 
				else {
					xe.setStartBefore(
					e[i].nodeType == Node.TEXT_NODE ? e[i] : e[i].firstChild);
					xe.setEnd(e[i], dangerous.endOffset);
				}
				re.unshift(xe);
			}
		}
		//console.log(re);
		// Middle -- the uncaptured middle
		if (0 < s.length && 0 < e.length) {
			var xm = document.createRange();
			console.log(xm);
			xm.setStartAfter(s[s.length - 1]);
			xm.setEndBefore(e[e.length - 1]);
		} 
		else {
			return [dangerous];
		}

		// Concat
		rs.push(xm);
		console.log(rs);
		var response = rs.concat(re);
		console.log(response);	
		// Send to Console
		return response;
	}
	function highlightText() {
		var userSelection = window.getSelection().getRangeAt(0);
		var safeRanges = getSafeRanges(userSelection);
		for (var i = 0; i < safeRanges.length; i++) {
			console.log(safeRanges[i].toString());
			highlightRange(safeRanges[i]);
		}
	}
	
	function unhighlightRange(range) {
		//avoid empty range
		if (range.toString() != "" && range.toString().match(/\w+/g) != null) {
		
			var newNode = document.createElement("span");
			newNode.setAttribute("style", "background-color: lightblue; display: inline;");
			range.surroundContents(newNode);
		}
	}
	function unhighlightText() {
		var userSelection = window.getSelection().getRangeAt(0);
		var safeRanges = getSafeRanges(userSelection);
		for (var i = 0; i < safeRanges.length; i++) {
			console.log(safeRanges[i].toString());
			unhighlightRange(safeRanges[i]);
		}
	}
	/*
	function unhighlightText() {
		var selectedText = "";
		if (document.getSelection) {
			selectedText = document.getSelection();
		} else if (window.getSelection) {
			selectedText = window.getSelection();
		} else if (document.selection) {
			selectedText = document.selection.createRange().text;
		}
		//Get a the selected content, in a range object
		document.getElementById("textContent").contentEditable = "true";
		var range = selectedText.getRangeAt(0);
		//If the range spans some text, and inside a tag, set its css class.
		if (range) {
			selectedText.removeAllRanges();
			selectedText.addRange(range);
		}
		document.execCommand("Backcolor", false, "lightblue");
		document.getElementById("textContent").contentEditable = "false";
	}
	*/
</script>

</head>
<body>
<!-- Book Content -->
<article>
    <div>
        <div>
            <div class="BackPage">
            <a href="/api/books">
                    <button type="button" class="btn btn-primary btn-lg">Reader</button>
            </a>
            </div>
            <div class="fixOptions">
                <button onclick="reset();">Reset</button>
                <select id="selectSize" onchange="selectSize(this); ">
                    <option value="" selected disabled hidden>Size</option>
                    <option>50%</option>
                    <option>100%</option>
                    <option>150%</option>
                    <option>200%</option>
                    <option>250%</option>
                    <option>300%</option>
                    <option>350%</option>
                </select>
                <select id="selectFont" onchange="selectFont(this);">
                    <option value="" selected disabled hidden>Font</option>
                    <option>Georgia</option>
                    <option>Palatino Linotype</option>
                    <option>Book Antiqua</option>
                    <option>Times New Roman</option>
                    <option>Arial</option>
                    <option>Helvetica</option>
                    <option>Arial Black</option>
                    <option>Impact</option>
                    <option>Lucida Sans Unicode</option>
                    <option>Tahoma</option>
                    <option>Verdana</option>
                    <option>Courier New</option>
                    <option>Lucida Console</option>
                </select>
                <button id="bookmarkBtn" onclick="addBookmark();">
                    Add Bookmark
                </button>
                <button id="zoomIn" onclick="zoom(this.id);">
                    Zoom In
                </button>
                <button id="zoomOut" onclick="zoom(this.id);">
                    Zoom Out
                </button>
                <button id="highlight" onclick="highlightText();">
                    Highlight
                </button>
                <button id="unhighlight" onclick="unhighlightText();">
                    Unhighlight
                </button>
            </div>
            <div class="borderTableOfContent" id="tableOfContent">
                <h3>Bookmark</h3>
            </div>
            <div id="textContent">
                <%- book.content %>
            </div>
        </div>
    </div>
</article>
<hr>








<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
        integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
        crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"
        integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo"
        crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"
        integrity="sha384-OgVRvuATP1z7JjHLkuOU7Xw704+h835Lr+6QL9UvYjZE3Ipu6Tp75j7Bh/kR0JKI"
        crossorigin="anonymous"></script>

</body>
</html>
